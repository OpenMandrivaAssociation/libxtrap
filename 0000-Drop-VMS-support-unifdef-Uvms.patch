From 699d2487d53da3373377d9c099fb64324dda1f5e Mon Sep 17 00:00:00 2001
From: Alan Coopersmith <alan.coopersmith@oracle.com>
Date: Fri, 5 Jul 2013 21:56:29 -0700
Subject: [PATCH 0/4] Drop VMS support (unifdef -Uvms)

Signed-off-by: Alan Coopersmith <alan.coopersmith@oracle.com>
---
 src/XERqsts.c    |  69 -----------------------------------
 src/XETrapInit.c |  38 --------------------
 src/XEWrappers.c | 108 -------------------------------------------------------
 3 files changed, 215 deletions(-)

diff --git a/src/XERqsts.c b/src/XERqsts.c
index 5f032ac..6fd6be0 100644
--- a/src/XERqsts.c
+++ b/src/XERqsts.c
@@ -58,76 +58,7 @@ SOFTWARE.
         dpy->request++
 #endif
 
-#ifndef vms
 #include <X11/Xlibint.h>
-#else   /* vms */
-#define SyncHandle() \
-    if (dpy->synchandler) (*dpy->synchandler)(dpy)
-/*
- * LockDisplay uses an undocumented feature in V5 of VMS that allows
- * disabling ASTs without calling $SETAST.  A bit is set in P1 space
- * that disables a user mode AST from being delivered to this process.
- * 
- */
-#define LockDisplay(dis)             \
-{   globalref char ctl$gb_soft_ast_disable;    \
-    globalref char ctl$gb_lib_lock;        \
-    globalref short ctl$gw_soft_ast_lock_depth;    \
-    if ( ctl$gb_soft_ast_disable == 0 ) {    \
-    ctl$gb_soft_ast_disable = 1;        \
-    ctl$gb_lib_lock = 1;            \
-    ctl$gw_soft_ast_lock_depth = 1;        \
-    }                        \
-    else ctl$gw_soft_ast_lock_depth++;        \
-}
-
-/*
- * UnlockDisplay clears the AST disable bit, then checks to see if an
- * AST delivery attempt was made during the critical section.  If so,
- * reenable_ASTs is set, and $SETAST must be called to turn AST delivery
- * back on.
- * 
- * Note that it assumed that LockDisplay and UnlockDisplay appear in
- * matched sets within a single routine.
- */
-#define UnlockDisplay(dis)             \
-{   globalref char ctl$gb_reenable_asts;    \
-    globalref char ctl$gb_soft_ast_disable;    \
-    globalref char ctl$gb_lib_lock;        \
-    globalref short ctl$gw_soft_ast_lock_depth;    \
-    if (!--ctl$gw_soft_ast_lock_depth)         \
-    if ( ctl$gb_lib_lock ) {        \
-        ctl$gb_lib_lock = 0;        \
-            ctl$gb_soft_ast_disable = 0;    \
-        if (ctl$gb_reenable_asts != 0)    \
-        sys$setast(1);            \
-        }                    \
-}
-
-#define WORD64ALIGN
-#if defined(__STDC__) && !defined(UNIXCPP)
-#define GetReq(name, req) \
-        WORD64ALIGN\
-        if ((dpy->bufptr + SIZEOF(x##name##Req)) > dpy->bufmax)\
-                _XFlush(dpy);\
-        req = (x##name##Req *)(dpy->last_req = dpy->bufptr);\
-        req->reqType = X_##name;\
-        req->length = (SIZEOF(x##name##Req))>>2;\
-        dpy->bufptr += SIZEOF(x##name##Req);\
-        dpy->request++
-
-#else  /* non-ANSI C uses empty comment instead of "##" for token concat */
-#define GetReq(name, req) \
-        WORD64ALIGN\
-        if ((dpy->bufptr + SIZEOF(x/**/name/**/Req)) > dpy->bufmax)\
-                _XFlush(dpy);\
-        req = (x/**/name/**/Req *)(dpy->last_req = dpy->bufptr);\
-        req->reqType = X_/**/name;\
-        req->length = (SIZEOF(x/**/name/**/Req))>>2;\
-        dpy->bufptr += SIZEOF(x/**/name/**/Req);\
-        dpy->request++
-#endif
-#endif /* vms */
 
 #include <X11/extensions/xtraplib.h>
 #include <X11/extensions/xtraplibp.h>
diff --git a/src/XETrapInit.c b/src/XETrapInit.c
index a4a0431..268d425 100644
--- a/src/XETrapInit.c
+++ b/src/XETrapInit.c
@@ -36,11 +36,7 @@ SOFTWARE.
 #ifdef UWS40
 #define _XSetLastRequestRead _SetLastRequestRead
 #endif
-#ifndef vms
 extern unsigned long _XSetLastRequestRead(Display *dpy, xGenericReply *rep);
-#else
-static unsigned long _XSetLastRequestRead(Display *dpy, xGenericReply *rep);
-#endif
 
 static XExtensionInfo *xtrap_info = NULL;
 static /* const */ char *xtrap_extension_name = XTrapExtName;
@@ -181,38 +177,4 @@ Bool XETrapQueryExtension(Display *dpy,INT32 *event_base_return,
     return(status);
 }
 
-#ifdef vms
-/* Hard-coded since this didn't make it into XLibShr's xfer vector */
-/* From [.XLIBEL.SRC]XLibInt.c in VMS Source Pool */
-unsigned long _XSetLastRequestRead(Display *dpy, xGenericReply *rep)
-{
-    register unsigned long      newseq, lastseq;
-
-    /*
-     * KeymapNotify has no sequence number, but is always guaranteed
-     * to immediately follow another event, except when generated via
-     * SendEvent (hmmm).
-     */
-    if ((rep->type & 0x7f) == KeymapNotify)
-        return(dpy->last_request_read);
-
-    newseq = (dpy->last_request_read & ~((unsigned long)0xffff)) |
-             rep->sequenceNumber;
-    lastseq = dpy->last_request_read;
-    while (newseq < lastseq) {
-        newseq += 0x10000;
-        if (newseq > dpy->request) {
-            (void) fprintf (stderr,
-            "Xlib:  sequence lost (0x%lx > 0x%lx) in reply type 0x%x!\n",
-                                    newseq, dpy->request,
-                                   (unsigned int) rep->type);
-            newseq -= 0x10000;
-           break;
-        }
-    }
-
-    dpy->last_request_read = newseq;
-    return(newseq);
-}
-#endif
 
diff --git a/src/XEWrappers.c b/src/XEWrappers.c
index 1e45b4a..7deb388 100644
--- a/src/XEWrappers.c
+++ b/src/XEWrappers.c
@@ -24,48 +24,9 @@ CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 #include <stdio.h>
 #include <X11/extensions/xtraplib.h>
 #include <X11/extensions/xtraplibp.h>
-#ifdef vms
-#define IS_AT_OR_AFTER(t1, t2) (((t2).high > (t1).high) \
-        || (((t2).high == (t1).high)&& ((t2).low >= (t1).low)))
-typedef struct _vms_time {
-     unsigned long low;
-     unsigned long high;
-}vms_time;                                      /* from IntrinsicP.h */
-#ifdef VMSDW_V3
-typedef struct _ModToKeysymTable {
-    Modifiers mask;
-    int count;
-    int index;
-} ModToKeysymTable;                             /* from TranslateI.h */
-typedef struct _ConverterRec **ConverterTable;  /* from ConvertI.h */
-#include "libdef.h"
-typedef struct _CallbackRec *CallbackList;      /* from CallbackI.h */
-typedef struct _XtGrabRec  *XtGrabList;         /* from EventI.h */
-#include <X11/PassivGraI.h>
-#include <X11/InitialI.h>
-#else  /* VMSDW_V3 */
-typedef struct _ModToKeysymTable {
-    Modifiers mask;
-    int count;
-    int index;
-} ModToKeysymTable;                             /* from TranslateI.h */
-typedef struct _ConverterRec **ConverterTable;  /* from ConvertI.h */
-#include "libdef.h"
-#define NFDBITS	(sizeof(fd_mask) * 8)
-typedef long  fd_mask;
-#ifndef howmany
-#define	howmany(x, y)	(((x)+((y)-1))/(y))
-#endif /* howmany */
-typedef	struct Fd_set {
-	fd_mask	fds_bits[howmany(256, NFDBITS)];
-} Fd_set;                                       /* from fd.h */
-#include <X11/InitializeI.h>
-#endif  /* VMSDW_V3 */
-#else  /* !vms */
 #include <X11/IntrinsicI.h>
 #define IS_AT_OR_AFTER(t1, t2) (((t2).tv_sec > (t1).tv_sec) \
         || (((t2).tv_sec == (t1).tv_sec)&& ((t2).tv_usec >= (t1).tv_usec)))
-#endif /* vms */
 
 /* The following has been lifted from NextEvent.c  in X11R4 */
 
@@ -162,12 +123,8 @@ XtInputMask XETrapAppPending(XtAppContext app)
     te_ptr = app->timerQueue;
     while (te_ptr != NULL)
     {
-#ifndef vms
         (void)gettimeofday(&cur_time, NULL);
         FIXUP_TIMEVAL(cur_time);
-#else
-        sys$gettim(&cur_time);
-#endif /* vms */
         if (IS_AT_OR_AFTER(te_ptr->te_timer_value, cur_time))
         {   /* this timer is due to fire */
             retmask |= XtIMTimer;
@@ -177,21 +134,10 @@ XtInputMask XETrapAppPending(XtAppContext app)
     }
 
     /* Now test for alternate input */
-#ifndef vms
     if (app->outstandingQueue != NULL)
     {
         retmask |= XtIMAlternateInput;
     }
-#else /* vms */
-    if ((app->Input_EF_Mask != 0L) && ((status=SYS$READEF(1,&efnMask)) == 1))
-    {   /* we have input configured & retrieved the efn cluster 0 */
-        efnMask &= app->Input_EF_Mask;  /* mask out non-input */
-        if (efnMask)                    /* any left? */
-        {                               /* yes, an alt-input efn is set */
-            retmask |= XtIMAlternateInput;
-        }
-    }
-#endif  /* vms */
     return(retmask);
 }
 
@@ -263,63 +209,9 @@ int XETrapAppWhileLoop(XtAppContext app, XETC *tc, Bool *done)
 /* Wait for either Timer, Alternate Input, or an X Event to arrive */
 int XETrapWaitForSomething(XtAppContext app)
 {
-#ifndef vms
     return(_XtWaitForSomething(app, FALSE, FALSE, FALSE, FALSE, TRUE
 #ifdef XTHREADS
     , FALSE
 #endif /* XTHREADS */
     , NULL));
-#else   /* vms */
-#define IS_AFTER(t1,t2) (((t2).high > (t1).high) \
-       ||(((t2).high == (t1).high)&& ((t2).low > (t1).low)))
-    long retval = 0L;
-    TimerEventRec *te_ptr;
-    vms_time cur_time,result_time;
-    int status = 0;
-    long quotient, remainder = 0;
-    int d;
-
-    if (app->timerQueue!= NULL) 
-    {   /* check timeout queue */
-        cur_time.low = cur_time.high = result_time.low = result_time.high = 0;
-        te_ptr = app->timerQueue;
-        sys$gettim(&cur_time);
-        if ((IS_AFTER(app->timerQueue->te_timer_value, cur_time))  &&
-            (app->timerQueue->te_proc != 0)) 
-        {   /* it's fired! return! */
-            return(0);
-        }
-        /* Jump through hoops to get the time specified in the queue into
-         * milliseconds 
-         */
-        status = lib$sub_times (&(te_ptr->te_timer_value.low), &cur_time,
-                                &result_time);
-        /*
-         * See if this timer has expired.  A timer is considered expired
-         * if it's value in the past (the NEGTIM case) or if there is
-         * less than one integral milli second before it would go off.
-         */
-
-        if (status == LIB$_NEGTIM ||
-            (result_time.high == -1 && result_time.low > -10000)) 
-        {   /* We've got a timer and it's ready to fire! */
-            return(0);
-        }
-        else if ((status & 1) == 1) 
-        {
-            lib$ediv (&(10000), &result_time, &quotient, &remainder);
-            quotient *= -1;         /* flip the sign bit */
-
-            return(XMultiplexInput(app->count, &(app->list[0L]),
-                app->Input_EF_Mask, quotient, 0L, &retval));
-        }
-        else
-        {
-            status = -1;
-        }
-    }
-     
-    return((status == -1 ? -1 : XMultiplexInput(app->count, &(app->list[0L]),
-           app->Input_EF_Mask, 0L, 0L, &retval)));
-#endif  /* vms */
 }
-- 
2.8.3

